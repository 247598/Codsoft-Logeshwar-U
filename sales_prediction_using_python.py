# -*- coding: utf-8 -*-
"""Sales Prediction Using Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wiL7lcp3wCX-AzAGKUWDoTrHo01hb_xa
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn
import scipy.stats as stats

sales = pd.read_csv("advertising.csv")
sales.head()

from matplotlib import pyplot as plt
sales['TV'].plot(kind='hist', bins=20, title='TV')
plt.gca().spines[['top', 'right',]].set_visible(False)

sales.describe()

sales["TV"]

from matplotlib import pyplot as plt
sales['TV'].plot(kind='hist', bins=20, title='TV', color='violet')
plt.gca().spines[['top','right']].set_visible(False)

sales["Radio"]

from matplotlib import pyplot as plt
sales['Radio'].plot(kind='hist', bins=20, title='Radio',color='indigo')
plt.gca().spines[['top', 'right',]].set_visible(False)

sales["Sales"]

from matplotlib import pyplot as plt
sales['Newspaper'].plot(kind='hist', bins=20, title='Newspaper',color='blue')
plt.gca().spines[['top', 'right',]].set_visible(False)

sales['Sales']

from matplotlib import pyplot as plt
sales['Sales'].plot(kind='hist', bins=20, title='Sales',color='green')
plt.gca().spines[['top', 'right',]].set_visible(False)

sales.describe()

X = sales['TV']
y = sales['Sales']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size = 0.7, test_size = 0.3, random_state = 100)

X_train.head()

y_train.head()

!pip install statsmodels

import statsmodels.api as sn

X_train_sn = sn.add_constant(X_train)

lr = sn.OLS(y_train, X_train_sn).fit()

lr.params

print(lr.summary())

plt.scatter(X_train , y_train)
plt.plot(X_train , 6.948 + 0.054*X_train, 'r')
plt.show()

y_train_pred = lr.predict(X_train_sn)
res = (y_train - y_train_pred)

fig = plt.figure()
sns.distplot(res , bins = 15)
fig.suptitle('Error Terms' , fontsize = 15)
plt.xlabel('y_train - y_train_pred' , fontsize = 15)
plt.show()

plt.scatter(X_train,res)
plt.show()

X_test_sn = sn.add_constant(X_test)
y_pred = lr.predict(X_test_sn)

y_pred.head()

!pip show scikit-learn

from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score

np.sqrt(mean_squared_error(y_test , y_pred))

r_squared = r2_score(y_test , y_pred)
r_squared

plt.scatter(X_train , y_train)
plt.plot(X_train , 6.948 + 0.054*X_train, 'r')
plt.show()